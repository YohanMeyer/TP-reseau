Nous voulons établir un système de chat basé sur des sockets TCP. Le but final est d'avoir un salon de discussion instantanée, où tous les participants écrivent des messages et reçoivent tous les messages de tous les participants. Ils peuvent rejoindre le chat et le quitter à tout moment.
Le système sera donc composé d'une instance de serveur centrale, exécutée sur une machine, et d'autant d'instances de clients que de participants qui voudront rejoindre le chat. Chaque client sera identifié par un pseudo
Le serveur, devant supporter de nombreuses connexions simultanées, devra instancier un nouveau thread pour chaque client qui se connecte, et de même, stopper l'exécution d'un thread client lorsque celui-ci quitte le chat. Pour ce faire, le serveur sera composé d'une socket principale qui écoutera les requêtes de connexions de clients, et qui, pour chaque client qui demande à se connecter, instanciera un nouveau thread spécifique en redirigeant le client vers ce thread.
Par ailleurs, chaque client sera composé de son côté d'un unique thread communiquant avec le serveur via son thread client réservé.
Chaque client instanciera une Socket pour lui permettre de se connecter au serveur, en lui spécifiant l'adresse IP et le port du serveur.
Le serveur n'instanciera qu'une ServerSocket principale par salon de chat, avec son adresse IP et son port connus pour que les clients puissent s'y connecter.
Pour que les clients puissent communiquer avec le serveur, ils devront échanger des données par le biais des flux de données associés à leurs sockets (flux entrant pour recevoir des données, flux sortant pour en envoyer).
Ainsi, une fois le client et le serveur connectés, en écrivant sur les flux sortants et en lisant les flux entrants de la socket client, ils peuvent échanger des données.
Lorsqu'un client envoie un message sur le chat, il faut que tous les autres participants reçoivent le message dans un délai très court. Ainsi, le message est tout d'abord envoyé au serveur via le thread client associé au client qui a envoyé le message, par le biais des flux de données décrits ci-dessus. Une fois que le thread client a reçu le message, il doit donc le partager avec tous les autres threads clients instanciés. Pour ce faire, ils partagent une variable globale commune